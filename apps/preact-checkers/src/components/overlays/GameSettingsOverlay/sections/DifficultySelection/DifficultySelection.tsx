import { faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { useState } from 'preact/hooks';
import { CheckersSetting, CheckersSettings } from 'wasm-checkers';
import { useBoard, useBoardDispatch } from '../../../../../context';
import { updateGameSettings } from '../../../../../context/board-context/board-context-actions';
import Button from '../../../../ui/Button';
import style from './DifficultySelection.module.scss';

// Taken from running `cargo bench` on the `wasm-checkers` package, I was too lazy to auto-include
// benchmark `.json` file when building the front-end.
// Having flying kings turned on really increases the complexity of the board states.
const DIFFICULTY_MEAN_TIMES_FLYING_KINGS = [
  '107.84 µs',
  '784.43 µs',
  '3.3174 ms',
  '15.049 ms',
  '109.19 ms',
  '475.58 ms',
  '2.0749 s',
  '9.7674 s',
  '37.597 s',
];
const DIFFICULTY_MEAN_TIMES = [
  '88.588 µs',
  '611.77 µs',
  '3.4002 ms',
  '10.114 ms',
  '32.819 ms',
  '97.925 ms',
  '362.23 ms',
  '1.3533 s',
  '2.2226 s',
];

export type DifficultySelectionProps = {};

function DifficultySelection(props: DifficultySelectionProps) {
  const [customOpen, setCustomOpen] = useState(false);

  const {
    gameSettings: { computerDepth, checkersSettings },
  } = useBoard();
  const boardDispatch = useBoardDispatch();
  const hasFlyingKings = CheckersSettings.contains_js(
    checkersSettings,
    CheckersSetting.FlyingKings
  );

  const difficulties = [
    {
      label: 'Easy',
      difficulty: 2,
      customDifficulties: [1, 2, 3],
    },
    {
      label: 'Medium',
      difficulty: 5,
      customDifficulties: [4, 5, 6],
    },
    {
      label: 'Hard',
      difficulty: 7,
      customDifficulties: [7, 8, 9],
    },
  ];

  const changeDepth = (depth: number) => {
    boardDispatch(
      updateGameSettings({
        computerDepth: depth,
      })
    );
  };

  return (
    <>
      <h1>Difficulty</h1>
      <div className={style.container}>
        {difficulties.map(
          ({ label, difficulty, customDifficulties }, index) => {
            return (
              <div className={style.buttonWrapper} key={`${label}-${index}`}>
                <Button
                  selected={customDifficulties.includes(computerDepth)}
                  onClick={() => changeDepth(difficulty)}
                >
                  {label}
                </Button>
                {customOpen && (
                  <div className={style.customButtonWrapper}>
                    {customDifficulties.map((difficulty, index) => {
                      return (
                        <Button
                          type="secondary"
                          variant={
                            hasFlyingKings && difficulty >= 8
                              ? 'warning'
                              : undefined
                          }
                          size="small"
                          selected={difficulty === computerDepth}
                          key={`${difficulty}-${index}`}
                          onClick={() => changeDepth(difficulty)}
                        >
                          {difficulty}
                        </Button>
                      );
                    })}
                  </div>
                )}
              </div>
            );
          }
        )}
      </div>
      {customOpen && (
        <>
          <p className="description">
            Selecting a custom difficulty changes the search depth of the
            underlying alpha-beta algorithm.
          </p>
          {hasFlyingKings && computerDepth >= 8 && (
            <p className="description">
              Although it is technically possible to play with a depth of more
              than 8 with the "Flying Kings" game rule, it can take
              significantly more time per each computer move.
            </p>
          )}
          <div className={style.row}>
            <p>Mean time per move</p>
            <p>
              {hasFlyingKings
                ? DIFFICULTY_MEAN_TIMES_FLYING_KINGS[computerDepth - 1]
                : DIFFICULTY_MEAN_TIMES[computerDepth - 1]}
            </p>
          </div>
          <p className="description">
            Mean times have been generated by benchmarking the Rust WebAssembly{' '}
            <a
              href="https://github.com/tomszir/chemkers/tree/main/packages/wasm-checkers"
              target="_blank"
              rel="noopener noreferrer"
            >
              wasm-checkers
            </a>{' '}
            move generation library on an initial board state with a sample size
            of 10.
          </p>
        </>
      )}
      <Button
        type="ghost"
        size="small"
        onClick={() => setCustomOpen(!customOpen)}
      >
        <span>Advanced</span>
        <FontAwesomeIcon
          icon={customOpen ? faChevronUp : faChevronDown}
        ></FontAwesomeIcon>
      </Button>
    </>
  );
}

export default DifficultySelection;
